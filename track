#!/usr/bin/env python3

import glob
from argparse import ArgumentParser
from datetime import date, datetime, timedelta
import importlib
import logging
from natsort import natsorted
from os.path import basename, getsize as getfilesize, isfile, splitext
import pickle
import pymongo
import requests
import sys
import traceback
from urllib.parse import quote_plus
import yaml

from BaseLogistics import *
from MyTelegram import Telegram, TelegramHandler

ONEDAY=timedelta(hours=23,minutes=55)

def my_excepthook(logger, typ, value, err_trace):
    logger.critical(u"%s: %s\n\nTraceback: %s" % (typ.__name__, value, ''.join(traceback.format_tb(err_trace))));

class ParcelTracker():
    def __init__(self, tg, config):
        self.cfg_save_raw = True
        self.cfg_raw_dir = 'raw'
        self.cfg_timeout = 2
        self.cfg_db_dir = 'db'
        self.config = config
        self.this_year = date.today().strftime('y')

        self.tg = tg

        self.logistics_dir = 'logistics'
        self.logistics = {}
        self.logistics_disabled = {}
        self.airlines_dir = 'airlines'
        self.airlines = {}
        self.airlines_disabled = {}
        self.cargo_prefixes= {}

        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        }

        self.session = requests.Session()
        self.session.mount('http://', requests.adapters.HTTPAdapter(max_retries=10))
        self.session.mount('https://', requests.adapters.HTTPAdapter(max_retries=10))

        # read logistics plugins
        for path in glob.glob('{}/*.py'.format(self.logistics_dir)):
            if basename(path) not in ('__init__.py', 'base.py'):
                name = splitext(path)[0].replace('/','.')
                plugin = importlib.import_module(name).Logistics(self)
                if plugin.disabled:
                    self.logistics_disabled[plugin.get_code()] = plugin
                else:
                    self.logistics[plugin.get_code()] = plugin

        # read airlines plugins
        for path in glob.glob('{}/*.py'.format(self.airlines_dir)):
            if basename(path) not in ('__init__.py', 'base.py'):
                name = splitext(path)[0].replace('/','.')
                plugin = importlib.import_module(name).Logistics(self)
                if plugin.disabled:
                    self.airlines_disabled[plugin.get_code()] = plugin
                else:
                    self.airlines[plugin.get_code()] = plugin
                    for prefix in plugin.prefixes:
                        self.cargo_prefixes[prefix] = plugin

        #initialize database
        self.use_db = self.__init_db()
        if not self.use_db:
            raise Exception('Please configure mongodb')

    def __init_db(self):
        # connection to DB
        db_cfg = self.config['database']
        if db_cfg['driver'] == 'mongodb':
            if db_cfg['user']:
                if not db_cfg.get('pwd', None):
                    print('No password provided for the mongodb')
                    exit(1)
                auth = '{}:{}@'.format(quote_plus(db_cfg['user']), quote_plus(db_cfg['pwd']))
            else:
                auto = ''
            client = pymongo.MongoClient('mongodb://{auth}{host}:{port}/{database}'.format(auth=auth, **db_cfg))
            db = client[db_cfg['database']]
            self.db_tracks = db.tracks
            self.db_errors = db.errors

            return True
        else:
            return False

    def get_track(self, logicode, trackno):
        if self.use_db:
            prev_info = self.db_tracks.find_one({'logicode': logicode, 'trackno': trackno})
            if prev_info:
                prev_info['prog'] = [make_namedtuple(prog) for prog in prev_info['prog']]

        if not prev_info:
            prev_info = get_info_base(logicode, trackno)
        return prev_info

    def save_track(self, logicode, trackno, info):
        if self.use_db:
            new_progs = []
            info['prog'] = [[type(prog).__name__, *prog] for prog in info['prog']]
            self.db_tracks.replace_one({'logicode': logicode, 'trackno': trackno}, info, upsert=True)

    def create_message(self, logi, name, trackno, prev_info, info):
        def formatted_str(mystr):
            if isinstance(mystr, datetime):
                mystr = mystr.strftime('%m/%d %H:%M')
            return mystr

        header = []
        msg1 = []
        msg2 = []

        for key in info['info']:
            var = info['info'][key]
            if key not in prev_info['info']:
                msg1.append('%s: %s' % (key, formatted_str(var)))
            elif var != prev_info['info'][key]:
                msg1.append('%s: %s → %s' % (key, formatted_str(prev_info['info'][key]), formatted_str(var)))

        for i in range(len(prev_info['prog']), len(info['prog'])):
            msg2.append('⦁ {}'.format(decorate_prog(info['prog'][i])))

        if msg1 or msg2:
            header.append(logi.get_name())
            header.append('%s (%s)' % (name, trackno))
            header.append('')
            if msg1 and msg2:
                msg1.append('')

        return header+msg1+msg2

    def proc_parcel(self, logicodes, trackno, name, year, checked=set(), cargo=False):
        parcel_errors = []

        for logicode in logicodes:
            if logicode in checked:
                continue
            else:
                checked.add(logicode)

            print('Processing: {} / {}, {}'.format(name, trackno, logicode))

            if cargo:
                if logicode in self.airlines_disabled:
                    print('더 이상 지원하지 않는 택배사입니다.')
                    return parcel_errors
                elif logicode not in self.airlines:
                    print('등록되지 않은 택배사 코드입니다.')
                    return parcel_errors
            else:
                if logicode in self.logistics_disabled:
                    print('더 이상 지원하지 않는 택배사입니다.')
                    return parcel_errors
                elif logicode not in self.logistics:
                    print('등록되지 않은 택배사 코드입니다.')
                    return parcel_errors

            errcode = False
            if cargo:
                logi = self.airlines[logicode]
            else:
                logi = self.logistics[logicode]

            # read previous log history
            prev_info = self.get_track(logicode, trackno)

            try:
                info = logi.process(trackno, year)
                if not (info['info'] or info['prog']):
                    raise NoInformationError

                # some progress may missing, so update it incrementally
                tmp_prog_info = list(prev_info['prog'])
                for prog in info['prog']:
                    if prog not in tmp_prog_info:
                        tmp_prog_info.append(prog)
                info['prog'] = tmp_prog_info

                msg = self.create_message(logi, name, trackno, prev_info, info)
                if msg:
                    total_msg = '\n'.join(msg)
                    if self.tg:
                        self.tg.send_message(total_msg)
                    else:
                        print(total_msg)

                    if not self.config['test']:
                        self.save_track(logicode, trackno, info)
            except Exception as e:
                if isinstance(e, LogisticsError):
                    if isinstance(e, LogisticsInMaintenanceError):
                        print('LogisticsInMaintenanceError')
                    else:
                        raise
                elif isinstance(e, ParcelError):
                    if isinstance(e, NoInformationError):
                        errcode = 'NoInformationError'
                    else:
                        raise
                    print(errcode)
                elif isinstance(e, KeyError):
                    errcode = 'ParsingError'
                    print(errcode)
                elif isinstance(e, requests.exceptions.SSLError):
                    errcode = 'SSL Error'
                    print(errcode)
                elif isinstance(e, requests.exceptions.ConnectionError):
                    errcode = 'Connection Error'
                    print(errcode)
                else:
                    raise

            parcel_errors.append({
                'logicode': logicode,
                'errcode': errcode,
            })

            # handling airlines
            airline, mbl = self.preproc_airline(logi, name, year, info)
            if airline and not cargo:
                parcel_errors.extend(self.proc_parcel([airline], mbl, name, year, checked, True))

            # handling next logistics
            parcel_errors.extend(self.proc_parcel(logi.next, trackno, name, year, checked))

        return parcel_errors

    def preproc_airline(self, logi, name, year, info):
        mbl =  info['info'].get(logi.mbl_name, None)
        if mbl:
            # remove non decimal
            mbl = re.sub('[^\d]+', '', mbl)
            prefix = mbl[0:3]
            if prefix in self.cargo_prefixes:
                return self.cargo_prefixes[prefix].get_code(), mbl

        return None, None

    def process(self, parcels):
        for parcel in parcels:
            logicodes = (x.strip() for x in parcel['LogiCodes'].split(','))
            trackno = str(parcel['TrackNo'])
            name = parcel['Name']
            parcel_errors = self.proc_parcel(logicodes, trackno, name, parcel.get('Year', self.this_year), set())
            self.report_parcel_errors(trackno, name, parcel_errors)

    def report_parcel_errors(self, trackno, name, parcel_errors):
        # Agile implementation. Refactoring will be followed.
        # The complexity may come from how proc_parcel is called. I will mode the calling part into the class

        db_errors = []
        msg = []
        now = datetime.now()
        for error in parcel_errors:
            logicode = error['logicode']
            errcode = error['errcode']

            if not errcode:
                # no error happens. deactive all present errors
                prev_errors = self.db_errors.find({'logicode': logicode, 'trackno': trackno, 'active': True})
                for perror in prev_errors:
                    perror['active'] = False
                    db_errors.append(perror)
            else:
                nerror = {
                    'logicode': logicode,
                    'trackno': trackno,
                    'errcode': errcode,
                    'started_at': now,
                    'lasted_until': now,
                    'reported_at': now,
                    'active': True,
                }
                prev_error = self.db_errors.find_one({'logicode': logicode, 'trackno': trackno, 'errcode': errcode})
                if prev_error:
                    nerror['reported_at'] = prev_error['reported_at']
                    if prev_error['active']:
                        nerror['started_at'] = prev_error['started_at']
                if not prev_error or (now - nerror['reported_at'] >= ONEDAY):
                    delta = (now - nerror['started_at'])
                    days = delta.days + round(delta.seconds/(60*60*24))
                    msg.append('{}: {} ({}) - {} days'.format(errcode, self.logistics.get(logicode, self.airlines.get(logicode, 'unknown')).get_name(), logicode, days))
                    nerror['reported_at'] = now

                db_errors.append(nerror)

        if msg:
            msg.insert(0, 'Parcel Tracker Errors')
            msg.insert(1, '{} ({})'.format(name, trackno))
            msg.insert(2, '')
            msg = '\n'.join(msg)
            if self.config['err-to-tg']:
                self.tg.send_message(msg, self.config['telegram']['err-chat-id'])
            else:
                print(msg)

        for error in db_errors:
            self.db_errors.replace_one({'logicode': error['logicode'], 'trackno': error['trackno'], 'errcode': error['errcode']}, error, upsert=True)

if __name__ == '__main__':
    parser = ArgumentParser(description='tracks internationl deliveries without risk of information leakage into 3rd parties')
    parser.add_argument('-p', '--parcels', type=str, default='parcels.yaml', help='yaml-based file containing list of parcels [default: %(default)s]')
    parser.add_argument('-c', '--config', type=str, default='config.yaml', help='configuration file containing Telegram credentials and channel IDs. Used when -u and/or -e options are enabled [default: %(default)s]')
    parser.add_argument('-u', '--upd-to-tg', action='store_true', help='send delivery status into the telegram channel in the configuraion')
    parser.add_argument('-e', '--err-to-tg', action='store_true', help='emit error messages to the telegram channel in the configuration')
    parser.add_argument('-l', '--logistics', action='store_true', help='print list of logistics')
    parser.add_argument('-t', '--test', nargs=2, metavar=('LOGICODE', 'TRACKNO'), help='track configured tracking number only')

    args = parser.parse_args()

    # prepare configuration file
    if not isfile(args.config):
        raise Exception('Cannot find configration file {}'.format(args.config))
    with open(args.config, 'r') as f:
        config = yaml.load(f, Loader=yaml.SafeLoader)
        config['test'] = args.test
        config['err-to-tg'] = args.err_to_tg

    # print list of logistics
    if args.logistics:
        tracker = ParcelTracker(None, config)

        message = ['현재 지원하는 택배사입니다.']
        message.append('----------------------------------------')
        for key in sorted(tracker.logistics):
            message.append('{:10s} {}'.format(key, tracker.logistics[key].get_name()))

        message.append('')
        message.append('현재 지원하는 항공편입니다.')
        message.append('----------------------------------------')
        for key in sorted(tracker.airlines):
            message.append('{:10s} {}'.format(key, tracker.airlines[key].get_name()))

        message.append('')
        message.append('더이상 지원하지 않는 택배사입니다.')
        message.append('----------------------------------------')
        for key in sorted(tracker.logistics_disabled):
            message.append('{:10s} {}'.format(key, tracker.logistics_disabled[key].get_name()))

        message.append('')
        message.append('더이상 지원하지 않는 항공편입니다.')
        message.append('----------------------------------------')
        for key in sorted(tracker.airlines_disabled):
            message.append('{:10s} {}'.format(key, tracker.airlines_disabled[key].get_name()))

        print('\n'.join(message))

        exit(0)

    # prepare Telegram bot
    if args.upd_to_tg or args.err_to_tg:
        tg = Telegram(config['telegram']['token'], config['telegram']['chat-id'], '해외 배송 소식')

        if args.err_to_tg:
            telegram_handler = TelegramHandler(tg, config['telegram']['err-chat-id'])
            logger = logging.getLogger()
            logger.addHandler(telegram_handler)

            func = lambda typ, value, traceback: my_excepthook(logger, typ, value, traceback)
            sys.excepthook = func
    else:
        tg = None

    # get list of parcels
    if args.test:
        parcels = [{
            'Name': 'Name',
            'LogiCodes': args.test[0],
            'TrackNo': args.test[1],
        }]
    else:
        if not isfile(args.parcels):
            raise Exception('Cannot find parcel files')
        with open(args.parcels, 'r') as f:
            parcels = yaml.load(f, Loader=yaml.SafeLoader)

    # prepare tracker
    tracker = ParcelTracker(tg, config)
    tracker.process(parcels)
